Traceback (most recent call last):
  File "/usr/local/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/local/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/local/Cellar/python@3.9/3.9.9/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
%store -r train_timings

# we will create an event count dataframe showing planned event metrics for each day.. and also average planned event metrics
# we will do the same for signals
# we will also create a dataframe to hold signal to planned event ratios

# create data for each day
train_timings_datetime_index = train_timings.set_index(['signal_passing_time'])
event_count_daily = pd.DataFrame()
event_count_daily['event_diff_mean'] = train_timings_datetime_index.groupby(pd.Grouper(freq='1D')).mean()['event_diff_seconds']
event_count_daily['event_count'] = train_timings_datetime_index.groupby(pd.Grouper(freq='1D')).count()['planned_event_type']

unique_signals_daily = pd.DataFrame()
unique_signals_daily['signal_count'] = train_timings_datetime_index[['signal']].groupby(pd.Grouper(freq='1D')).aggregate(pd.Series.nunique)
unique_signals_daily['signals_recorded'] = train_timings_datetime_index.groupby(pd.Grouper(freq='1D')).count()['signal']
unique_signals_daily['percent'] = unique_signals_daily['signal_count'].div(343)

signal_to_planned_event_ratio = pd.DataFrame()
signal_to_planned_event_ratio['ratio'] = unique_signals_daily['signal_count'].div(event_count_daily['event_count'])

# add the average data
event_count_daily_mean = pd.DataFrame()
event_count_daily_mean['event_count_day_of_week_mean'] = event_count_daily['event_count'].groupby(event_count_daily.index.day_name()).mean()
event_count_daily['day_of_week'] = event_count_daily.index.day_name()
event_count_daily = event_count_daily.merge(event_count_daily_mean, how='left',left_on='day_of_week', right_index=True)
event_count_daily

unique_signals_daily_mean = pd.DataFrame()
unique_signals_daily_mean['signal_count_day_of_week_mean'] = unique_signals_daily['signal_count'].groupby(unique_signals_daily.index.day_name()).mean()
unique_signals_daily_mean['signals_recorded_day_of_week_mean'] = unique_signals_daily['signals_recorded'].groupby(unique_signals_daily.index.day_name()).mean()
unique_signals_daily['day_of_week'] = event_count_daily.index.day_name()
unique_signals_daily = unique_signals_daily.merge(unique_signals_daily_mean, how='left',left_on='day_of_week', right_index=True)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn [1], line 2[0m
[1;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mpandas[39;00m [38;5;28;01mas[39;00m [38;5;21;01mpd[39;00m
[0;32m----> 2[0m [38;5;28;01mimport[39;00m [38;5;21;01mseaborn[39;00m [38;5;28;01mas[39;00m [38;5;21;01msns[39;00m
[1;32m      3[0m [38;5;28;01mimport[39;00m [38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m [38;5;28;01mas[39;00m [38;5;21;01mplt[39;00m
[1;32m      4[0m get_ipython()[38;5;241m.[39mrun_line_magic([38;5;124m'[39m[38;5;124mstore[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124m-r train_timings[39m[38;5;124m'[39m)

[0;31mModuleNotFoundError[0m: No module named 'seaborn'
ModuleNotFoundError: No module named 'seaborn'

